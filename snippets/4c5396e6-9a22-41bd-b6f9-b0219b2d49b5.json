{
  "uuid": "4c5396e6-9a22-41bd-b6f9-b0219b2d49b5",
  "name": "Google_Youtube",
  "description": "List Youtube Info",
  "extraSearchTerms": [
    "Google",
    "Youtube"
  ],
  "tags": [
    "Google"
  ],
  "code": "\r\npublic class GoogleYoutube {\r\n\r\n   /**\r\n     * Define a global instance of the HTTP transport.\r\n     */\r\n    public static final HttpTransport ${HTTP_TRANSPORT:newName(com.google.api.client.http.HttpTransport)} \u003d new NetHttpTransport();\r\n\r\n    /**\r\n     * Define a global instance of the JSON factory.\r\n     */\r\n    public static final JsonFactory ${JSON_FACTORY:newName(com.google.api.client.json.JsonFactory)} \u003d new JacksonFactory();\r\n\r\n    /**\r\n     * This is the directory that will be used under the user\u0027s home directory where OAuth tokens will be stored.\r\n     */\r\n    private static final String ${CREDENTIALS_DIRECTORY:newName(java.lang.String)} \u003d \".oauth-credentials\";\r\n    \r\n   private static final  String ${apiKey:newName(java.lang.String)} \u003d \"AIzaSyAM2Z-DIV4t72YtOmjeezNHfx_xrs24Ejw\";\r\n\r\n    private static final long ${NUMBER_OF_VIDEOS_RETURNED:newName(long)} \u003d 25;\r\n\r\n    /**\r\n     * Define a global instance of a Youtube object, which will be used\r\n     * to make YouTube Data API requests.\r\n     */\r\n    private static YouTube ${youtube:newName(com.google.api.services.youtube.YouTube)};\r\n\r\n\r\n  \r\n//  public static Credential authorize(List\u003cString\u003e scopes, String credentialDatastore) throws IOException {\r\n//\r\n//        // Load client secrets.\r\n//        Reader clientSecretReader \u003d new InputStreamReader(Auth.class.getResourceAsStream(\"client_secrets.json\"));\r\n//        GoogleClientSecrets clientSecrets \u003d GoogleClientSecrets.load(JSON_FACTORY, clientSecretReader);\r\n//\r\n//        // Checks that the defaults have been replaced (Default \u003d \"Enter X here\").\r\n//        if (clientSecrets.getDetails().getClientId().startsWith(\"Enter\")\r\n//                || clientSecrets.getDetails().getClientSecret().startsWith(\"Enter \")) {\r\n//            System.out.println(\r\n//                    \"Enter Client ID and Secret from https://code.google.com/apis/console/?api\u003dyoutube\"\r\n//                            + \"into src/main/resources/client_secrets.json\");\r\n//            System.exit(1);\r\n//        }\r\n//\r\n//        // This creates the credentials datastore at ~/.oauth-credentials/$${credentialDatastore}\r\n//        FileDataStoreFactory fileDataStoreFactory \u003d new FileDataStoreFactory(new File(System.getProperty(\"user.home\") + \"/\" + CREDENTIALS_DIRECTORY));\r\n//        DataStore\u003cStoredCredential\u003e datastore \u003d fileDataStoreFactory.getDataStore(credentialDatastore);\r\n//\r\n//        GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder(\r\n//                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, scopes).setCredentialDataStore(datastore)\r\n//                .build();\r\n//\r\n//        // Build the local server and bind it to port 8080\r\n//        LocalServerReceiver localReceiver \u003d new LocalServerReceiver.Builder().setPort(8080).build();\r\n//\r\n//        // Authorize.\r\n//        return new AuthorizationCodeInstalledApp(flow, localReceiver).authorize(\"user\");\r\n//    }\r\n  \r\n  \r\n  \r\n    /**\r\n     * Initialize a YouTube object to search for videos on YouTube. Then\r\n     * display the name and thumbnail image of each video in the result set.\r\n     *\r\n     * @param ${args} command line args.\r\n     */\r\n    public static void main(String[] ${args:newName(\u0027java.lang.String[]\u0027)}) {\r\n      \r\n        try {\r\n            // This object is used to make YouTube Data API requests. The last\r\n            // argument is required, but since we don\u0027t need anything\r\n            // initialized when the HttpRequest is initialized, we override\r\n            // the interface and provide a no-op function.\r\n            ${youtube} \u003d new YouTube.Builder(${HTTP_TRANSPORT},${JSON_FACTORY}, new HttpRequestInitializer() {\r\n                public void initialize(HttpRequest ${request:newName(com.google.api.client.http.HttpRequest)}) throws IOException {\r\n                }\r\n            }).setApplicationName(\"youtube-cmdline-search-sample\").build();\r\n\r\n            // Prompt the user to enter a query term.\r\n            String ${queryTerm:newName(java.lang.String)} \u003d getInputQuery();\r\n\r\n            // Define the API request for retrieving search results.\r\n            YouTube.Search.List ${search:newName(com.google.api.services.youtube.YouTube.Search.List)} \u003d ${youtube}.search().list(\"id,snippet\");\r\n\r\n            // Set your developer key from the {{ Google Cloud Console }} for\r\n            // non-authenticated requests. See:\r\n            // {{ https://cloud.google.com/console }}\r\n           \r\n            ${search}.setKey(${apiKey});\r\n            ${search}.setQ(${queryTerm});\r\n\r\n            // Restrict the search results to only include videos. See:\r\n            // https://developers.google.com/youtube/v3/docs/search/list#type\r\n            ${search}.setType(\"video\");\r\n\r\n            // To increase efficiency, only retrieve the fields that the\r\n            // application uses.\r\n            ${search}.setFields(\"items(id/kind,id/videoId,snippet/title,snippet/thumbnails/default/url)\");\r\n            ${search}.setMaxResults(${NUMBER_OF_VIDEOS_RETURNED});\r\n\r\n            // Call the API and print results.\r\n            SearchListResponse ${searchResponse:newName(com.google.api.services.youtube.model.SearchListResponse)} \u003d ${search}.execute();\r\n            List\u003cSearchResult\u003e ${searchResultList:newName(java.util.List)} \u003d ${searchResponse}.getItems();\r\n            if (${searchResultList} !\u003d null) {\r\n                prettyPrint(${searchResultList}.iterator(), ${queryTerm});\r\n            }\r\n        } catch (GoogleJsonResponseException ${e:newName(com.google.api.client.googleapis.json.GoogleJsonResponseException)}) {\r\n            System.err.println(\"There was a service error: \" + ${e}.getDetails().getCode() + \" : \"\r\n                    + ${e}.getDetails().getMessage());\r\n        } catch (IOException ${e2:newName(java.io.IOException)}) {\r\n            System.err.println(\"There was an IO error: \" + ${e2}.getCause() + \" : \" + ${e2}.getMessage());\r\n        } catch (Throwable ${t:newName(java.lang.Throwable)}) {\r\n            ${t}.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Prompt the user to enter a query term and return the user-specified term.\r\n     */\r\n    private static String getInputQuery() throws IOException {\r\n\r\n        String ${inputQuery:newName(java.lang.String)} \u003d \"\";\r\n\r\n        System.out.print(\"Please enter a search term: \");\r\n        BufferedReader ${bReader:newName(java.io.BufferedReader)} \u003d new BufferedReader(new InputStreamReader(System.in));\r\n        ${inputQuery} \u003d ${bReader}.readLine();\r\n\r\n        if (${inputQuery}.length() \u003c 1) {\r\n            // Use the string \"YouTube Developers Live\" as a default.\r\n            ${inputQuery} \u003d \"YouTube Developers Live\";\r\n        }\r\n        return ${inputQuery};\r\n    }\r\n\r\n    /*\r\n     * Prints out all results in the Iterator. For each result, print the\r\n     * title, video ID, and thumbnail.\r\n     *\r\n     * @param iteratorSearchResults Iterator of SearchResults to print\r\n     *\r\n     * @param query Search query (String)\r\n     */\r\n    private static void prettyPrint(Iterator\u003cSearchResult\u003e ${iteratorSearchResults:newName(java.util.Iterator)}, String ${query:newName(java.lang.String)}) {\r\n\r\n        System.out.println(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\r\n        System.out.println(\r\n                \"   First \" + ${NUMBER_OF_VIDEOS_RETURNED} + \" videos for search on \\\"\" + ${query} + \"\\\".\");\r\n        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");\r\n\r\n        if (!${iteratorSearchResults}.hasNext()) {\r\n            System.out.println(\" There aren\u0027t any results for your query.\");\r\n        }\r\n\r\n        while (${iteratorSearchResults}.hasNext()) {\r\n\r\n            SearchResult ${singleVideo:newName(com.google.api.services.youtube.model.SearchResult)} \u003d ${iteratorSearchResults}.next();\r\n            ResourceId ${rId:newName(com.google.api.services.youtube.model.ResourceId)} \u003d ${singleVideo}.getId();\r\n\r\n            // Confirm that the result represents a video. Otherwise, the\r\n            // item will not contain a video ID.\r\n            if (${rId}.getKind().equals(\"youtube#video\")) {\r\n                Thumbnail ${thumbnail:newName(com.google.api.services.youtube.model.Thumbnail)} \u003d ${singleVideo}.getSnippet().getThumbnails().getDefault();\r\n\r\n                System.out.println(\" Video Id\" + ${rId}.getVideoId());\r\n                System.out.println(\" Title: \" + ${singleVideo}.getSnippet().getTitle());\r\n                System.out.println(\" Thumbnail: \" + ${thumbnail}.getUrl());\r\n                System.out.println(\"\\n-------------------------------------------------------------\\n\");\r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n${import:import(com.google.api.client.googleapis.json.GoogleJsonResponseException, com.google.api.client.http.HttpRequest, com.google.api.client.http.HttpRequestInitializer, com.google.api.client.http.HttpTransport, com.google.api.client.http.javanet.NetHttpTransport, com.google.api.client.json.JsonFactory, com.google.api.client.json.jackson2.JacksonFactory, com.google.api.services.youtube.YouTube, com.google.api.services.youtube.model.ResourceId, com.google.api.services.youtube.model.SearchListResponse, com.google.api.services.youtube.model.SearchResult, com.google.api.services.youtube.model.Thumbnail, java.io.BufferedReader, java.io.IOException, java.io.InputStreamReader, java.util.Iterator, java.util.List)}${cursor}\r\n",
  "location": "JAVA",
  "dependencies": [
    {
      "groupId": "jre",
      "artifactId": "jre",
      "version": "0.0.0"
    }
  ]
}