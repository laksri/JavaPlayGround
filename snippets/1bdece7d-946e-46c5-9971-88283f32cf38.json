{
  "uuid": "1bdece7d-946e-46c5-9971-88283f32cf38",
  "name": "Google_Email",
  "description": "Get info from Google Email",
  "extraSearchTerms": [
    "Google",
    "Email"
  ],
  "tags": [
    "Google"
  ],
  "code": "\r\npublic class GoogleEmail {\r\n\r\n    private static final String ${APPLICATION_NAME:newName(java.lang.String)} \u003d \"snippet-java-1099\";\r\n\r\n  /** Directory to store user credentials. */\r\n  private static final java.io.File ${DATA_STORE_DIR:newName(java.io.File)} \u003d\r\n      new java.io.File(\"store/gmail\");\r\n\r\n    /** Global instance of the {@link FileDataStoreFactory}. */\r\n    private static FileDataStoreFactory ${DATA_STORE_FACTORY:newName(com.google.api.client.util.store.FileDataStoreFactory)};\r\n\r\n    /** Global instance of the JSON factory. */\r\n    private static final JsonFactory ${JSON_FACTORY:newName(com.google.api.client.json.JsonFactory)} \u003d\r\n        JacksonFactory.getDefaultInstance();\r\n\r\n    /** Global instance of the HTTP transport. */\r\n    private static HttpTransport ${HTTP_TRANSPORT:newName(com.google.api.client.http.HttpTransport)};\r\n\r\n    /** Global instance of the scopes required by this quickstart. */\r\n    private static final List\u003cString\u003e ${SCOPES:newName(java.util.List)} \u003d\r\n        Arrays.asList(GmailScopes.GMAIL_READONLY);\r\n\r\n    static {\r\n        try {\r\n            ${HTTP_TRANSPORT} \u003d GoogleNetHttpTransport.newTrustedTransport();\r\n            ${DATA_STORE_FACTORY} \u003d new FileDataStoreFactory(${DATA_STORE_DIR});\r\n        } catch (Throwable ${t:newName(java.lang.Throwable)}) {\r\n            ${t}.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates an authorized Credential object.\r\n     * @return an authorized Credential object.\r\n     * @throws IOException\r\n     */\r\n    public static Credential authorize() throws IOException {\r\n        // Load client secrets.\r\n        InputStream ${in:newName(java.io.InputStream)} \u003d\r\n            GoogleEmail.class.getResourceAsStream(\"client_secrets.json\");\r\n        GoogleClientSecrets ${clientSecrets:newName(com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets)} \u003d\r\n            GoogleClientSecrets.load(${JSON_FACTORY}, new InputStreamReader(${in}));\r\n\r\n        // Build flow and trigger user authorization request.\r\n        GoogleAuthorizationCodeFlow ${flow:newName(com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow)} \u003d\r\n                new GoogleAuthorizationCodeFlow.Builder(\r\n                        ${HTTP_TRANSPORT}, ${JSON_FACTORY}, ${clientSecrets}, ${SCOPES})\r\n                .setDataStoreFactory(${DATA_STORE_FACTORY})\r\n                .setAccessType(\"offline\")\r\n                .build();\r\n        Credential ${credential:newName(com.google.api.client.auth.oauth2.Credential)} \u003d new AuthorizationCodeInstalledApp(\r\n            ${flow}, new LocalServerReceiver()).authorize(\"user\");\r\n        System.out.println(\r\n                \"Credentials saved to \" + ${DATA_STORE_DIR}.getAbsolutePath());\r\n        return ${credential};\r\n    }\r\n\r\n    /**\r\n     * Build and return an authorized Gmail client service.\r\n     * @return an authorized Gmail client service\r\n     * @throws IOException\r\n     */\r\n    public static Gmail getGmailService() throws IOException {\r\n        Credential ${credential2:newName(com.google.api.client.auth.oauth2.Credential)} \u003d authorize();\r\n        return new Gmail.Builder(${HTTP_TRANSPORT}, ${JSON_FACTORY}, ${credential2})\r\n                .setApplicationName(${APPLICATION_NAME})\r\n                .build();\r\n    }\r\n\r\n    public static void main(String[] ${args:newName(\u0027java.lang.String[]\u0027)}) throws IOException {\r\n        // Build a new authorized API client service.\r\n        Gmail ${service:newName(com.google.api.services.gmail.Gmail)} \u003d getGmailService();\r\n\r\n        // Print the labels in the user\u0027s account.\r\n        String ${user:newName(java.lang.String)} \u003d \"me\";\r\n        ListLabelsResponse ${listResponse:newName(com.google.api.services.gmail.model.ListLabelsResponse)} \u003d\r\n            ${service}.users().labels().list(${user}).execute();\r\n        List\u003cLabel\u003e ${labels:newName(java.util.List)} \u003d ${listResponse}.getLabels();\r\n        if (${labels}.size() \u003d\u003d 0) {\r\n            System.out.println(\"No labels found.\");\r\n        } else {\r\n            System.out.println(\"Labels:\");\r\n            for (Label ${label:newName(com.google.api.services.gmail.model.Label)} : ${labels}) {\r\n                System.out.printf(\"- %s\\n\", ${label}.getName());\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n${import:import(com.google.api.client.auth.oauth2.Credential, com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp, com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver, com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow, com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets, com.google.api.client.googleapis.javanet.GoogleNetHttpTransport, com.google.api.client.http.HttpTransport, com.google.api.client.json.JsonFactory, com.google.api.client.json.jackson2.JacksonFactory, com.google.api.client.util.store.FileDataStoreFactory, com.google.api.services.gmail.Gmail, com.google.api.services.gmail.GmailScopes, com.google.api.services.gmail.model.Label, com.google.api.services.gmail.model.ListLabelsResponse, java.io.IOException, java.io.InputStream, java.io.InputStreamReader, java.util.Arrays, java.util.List)}${cursor}\r\n",
  "location": "JAVA",
  "dependencies": [
    {
      "groupId": "jre",
      "artifactId": "jre",
      "version": "0.0.0"
    }
  ]
}