{
  "uuid": "01ae82f8-9bf2-4a78-89a5-fc07d52adb17",
  "name": "Google_Contacts",
  "description": "Get Info from Google Contacts",
  "extraSearchTerms": [
    "Google",
    "Contacts"
  ],
  "tags": [
    "Google"
  ],
  "code": "\r\npublic class GoogleContacts {\r\n    \r\n      private static final String ${APPLICATION_NAME:newName(java.lang.String)} \u003d \"snippet-java-1099\";\r\n\r\n  /** Directory to store user credentials. */\r\n  private static final java.io.File ${DATA_STORE_DIR:newName(java.io.File)} \u003d\r\n      new java.io.File(\"store/contacts\");\r\n\r\n    /** Global instance of the {@link FileDataStoreFactory}. */\r\n    private static FileDataStoreFactory ${DATA_STORE_FACTORY:newName(com.google.api.client.util.store.FileDataStoreFactory)};\r\n\r\n    /** Global instance of the JSON factory. */\r\n    private static final JsonFactory ${JSON_FACTORY:newName(com.google.api.client.json.JsonFactory)} \u003d\r\n        JacksonFactory.getDefaultInstance();\r\n\r\n    /** Global instance of the HTTP transport. */\r\n    private static HttpTransport ${HTTP_TRANSPORT:newName(com.google.api.client.http.HttpTransport)};\r\n\r\n    /** Global instance of the scopes required by this quickstart. */\r\n    private static final List\u003cString\u003e ${SCOPES:newName(java.util.List)} \u003dnew ArrayList\u003cString\u003e();\r\n       \r\n\r\n    static {\r\n        try {\r\n           \r\n            ${HTTP_TRANSPORT} \u003d GoogleNetHttpTransport.newTrustedTransport();\r\n            ${DATA_STORE_FACTORY} \u003d new FileDataStoreFactory(${DATA_STORE_DIR});\r\n        } catch (Throwable ${t:newName(java.lang.Throwable)}) {\r\n            ${t}.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n  \r\n    \r\n    public static void main(String[] ${args:newName(\u0027java.lang.String[]\u0027)}) {\r\n        try{\r\n            // SCOPES.add(\"https://www.google.com/m8/feeds\");\r\n            Credential ${credential:newName(com.google.api.client.auth.oauth2.Credential)}\u003dauthorize();\r\n         ContactsService ${myService:newName(com.google.gdata.client.contacts.ContactsService)} \u003d new ContactsService(${APPLICATION_NAME});\r\n         \r\n        // myService.setProtocolVersion(new Version);\r\n         ${myService}.setHeader(\"GData-Version\",\"3.0\");\r\n         ${myService}.getRequestFactory().setHeader(\"User-Agent\", ${APPLICATION_NAME});\r\n        \r\n//          myService.setUserToken(\"AIzaSyAM2Z-DIV4t72YtOmjeezNHfx_xrs24Ejw\");\r\n    //  myService.setOAuth2Credentials(credential);\r\n    \r\n            System.out.println(\"--\"+${credential}.getAccessToken());\r\n        ${myService}.setHeader(\"Authorization\", \"Bearer \"+${credential}.getAccessToken() );\r\n\r\n         \r\n         printAllContacts(${myService});\r\n        }\r\n        catch (Exception ${ex:newName(java.lang.Exception)}) {\r\n            ${ex}.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    \r\n     /**\r\n     * Creates an authorized Credential object.\r\n     * @return an authorized Credential object.\r\n     * @throws IOException\r\n     */\r\n    public static Credential authorize() throws IOException {\r\n        // Load client secrets.\r\n        InputStream ${in:newName(java.io.InputStream)} \u003d\r\n            GoogleEmail.class.getResourceAsStream(\"client_secrets.json\");\r\n        GoogleClientSecrets ${clientSecrets:newName(com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets)} \u003d\r\n            GoogleClientSecrets.load(${JSON_FACTORY}, new InputStreamReader(${in}));\r\n\r\n        // Build flow and trigger user authorization request.\r\n        GoogleAuthorizationCodeFlow ${flow:newName(com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow)} \u003d\r\n                new GoogleAuthorizationCodeFlow.Builder(\r\n                        ${HTTP_TRANSPORT}, ${JSON_FACTORY}, ${clientSecrets}, ${SCOPES})\r\n                .setDataStoreFactory(${DATA_STORE_FACTORY})\r\n                .setAccessType(\"offline\")\r\n                .build();\r\n          LocalServerReceiver ${localReceiver:newName(com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver)} \u003d new LocalServerReceiver.Builder().setPort(8080).build();\r\n        Credential ${credential2:newName(com.google.api.client.auth.oauth2.Credential)} \u003d new AuthorizationCodeInstalledApp(\r\n            ${flow},${localReceiver}).authorize(\"user\");\r\n        \r\n        return ${credential2};\r\n    }\r\n\r\n    public static void printAllContacts(ContactsService ${myService2:newName(com.google.gdata.client.contacts.ContactsService)})\r\n    throws ServiceException, IOException {\r\n  // Request the feed\r\n  URL ${feedUrl:newName(java.net.URL)} \u003d new URL(\"https://www.google.com/m8/feeds/contacts/default/full\");\r\n  ContactFeed ${resultFeed:newName(com.google.gdata.data.contacts.ContactFeed)} \u003d ${myService2}.getFeed(${feedUrl}, ContactFeed.class);\r\n  // Print the results\r\n  System.out.println(${resultFeed}.getTitle().getPlainText());\r\n  for (ContactEntry ${entry:newName(com.google.gdata.data.contacts.ContactEntry)} : ${resultFeed}.getEntries()) {\r\n    if (${entry}.hasName()) {\r\n      Name ${name:newName(com.google.gdata.data.extensions.Name)} \u003d ${entry}.getName();\r\n      if (${name}.hasFullName()) {\r\n        String ${fullNameToDisplay:newName(java.lang.String)} \u003d ${name}.getFullName().getValue();\r\n        if (${name}.getFullName().hasYomi()) {\r\n          ${fullNameToDisplay} +\u003d \" (\" + ${name}.getFullName().getYomi() + \")\";\r\n        }\r\n      System.out.println(\"\\t\\t\" + ${fullNameToDisplay});\r\n      } else {\r\n        System.out.println(\"\\t\\t (no full name found)\");\r\n      }\r\n      if (${name}.hasNamePrefix()) {\r\n        System.out.println(\"\\t\\t\" + ${name}.getNamePrefix().getValue());\r\n      } else {\r\n        System.out.println(\"\\t\\t (no name prefix found)\");\r\n      }\r\n      if (${name}.hasGivenName()) {\r\n        String ${givenNameToDisplay:newName(java.lang.String)} \u003d ${name}.getGivenName().getValue();\r\n        if (${name}.getGivenName().hasYomi()) {\r\n          ${givenNameToDisplay} +\u003d \" (\" + ${name}.getGivenName().getYomi() + \")\";\r\n        }\r\n        System.out.println(\"\\t\\t\" + ${givenNameToDisplay});\r\n      } else {\r\n        System.out.println(\"\\t\\t (no given name found)\");\r\n      }\r\n      if (${name}.hasAdditionalName()) {\r\n        String ${additionalNameToDisplay:newName(java.lang.String)} \u003d ${name}.getAdditionalName().getValue();\r\n        if (${name}.getAdditionalName().hasYomi()) {\r\n          ${additionalNameToDisplay} +\u003d \" (\" + ${name}.getAdditionalName().getYomi() + \")\";\r\n        }\r\n        System.out.println(\"\\t\\t\" + ${additionalNameToDisplay});\r\n      } else {\r\n        System.out.println(\"\\t\\t (no additional name found)\");\r\n      }\r\n      if (${name}.hasFamilyName()) {\r\n        String ${familyNameToDisplay:newName(java.lang.String)} \u003d ${name}.getFamilyName().getValue();\r\n        if (${name}.getFamilyName().hasYomi()) {\r\n          ${familyNameToDisplay} +\u003d \" (\" + ${name}.getFamilyName().getYomi() + \")\";\r\n        }\r\n        System.out.println(\"\\t\\t\" + ${familyNameToDisplay});\r\n      } else {\r\n        System.out.println(\"\\t\\t (no family name found)\");\r\n      }\r\n      if (${name}.hasNameSuffix()) {\r\n        System.out.println(\"\\t\\t\" + ${name}.getNameSuffix().getValue());\r\n      } else {\r\n        System.out.println(\"\\t\\t (no name suffix found)\");\r\n      }\r\n    } else {\r\n      System.out.println(\"\\t (no name found)\");\r\n    }\r\n    System.out.println(\"Email addresses:\");\r\n    for (Email ${email:newName(com.google.gdata.data.extensions.Email)} : ${entry}.getEmailAddresses()) {\r\n      System.out.print(\" \" + ${email}.getAddress());\r\n      if (${email}.getRel() !\u003d null) {\r\n        System.out.print(\" rel:\" + ${email}.getRel());\r\n      }\r\n      if (${email}.getLabel() !\u003d null) {\r\n        System.out.print(\" label:\" + ${email}.getLabel());\r\n      }\r\n      if (${email}.getPrimary()) {\r\n        System.out.print(\" (primary) \");\r\n      }\r\n      System.out.print(\"\\n\");\r\n    }\r\n    System.out.println(\"IM addresses:\");\r\n    for (Im ${im:newName(com.google.gdata.data.extensions.Im)} : ${entry}.getImAddresses()) {\r\n      System.out.print(\" \" + ${im}.getAddress());\r\n      if (${im}.getLabel() !\u003d null) {\r\n        System.out.print(\" label:\" + ${im}.getLabel());\r\n      }\r\n      if (${im}.getRel() !\u003d null) {\r\n        System.out.print(\" rel:\" + ${im}.getRel());\r\n      }\r\n      if (${im}.getProtocol() !\u003d null) {\r\n        System.out.print(\" protocol:\" + ${im}.getProtocol());\r\n      }\r\n      if (${im}.getPrimary()) {\r\n        System.out.print(\" (primary) \");\r\n      }\r\n      System.out.print(\"\\n\");\r\n    }\r\n    System.out.println(\"Groups:\");\r\n    for (GroupMembershipInfo ${group:newName(com.google.gdata.data.contacts.GroupMembershipInfo)} : ${entry}.getGroupMembershipInfos()) {\r\n      String ${groupHref:newName(java.lang.String)} \u003d ${group}.getHref();\r\n      System.out.println(\"  Id: \" + ${groupHref});\r\n    }\r\n    System.out.println(\"Extended Properties:\");\r\n    for (ExtendedProperty ${property:newName(com.google.gdata.data.extensions.ExtendedProperty)} : ${entry}.getExtendedProperties()) {\r\n      if (${property}.getValue() !\u003d null) {\r\n        System.out.println(\"  \" + ${property}.getName() + \"(value) \u003d \" +\r\n            ${property}.getValue());\r\n      } else if (${property}.getXmlBlob() !\u003d null) {\r\n        System.out.println(\"  \" + ${property}.getName() + \"(xmlBlob)\u003d \" +\r\n            ${property}.getXmlBlob().getBlob());\r\n      }\r\n    }\r\n    Link ${photoLink:newName(com.google.gdata.data.Link)} \u003d ${entry}.getContactPhotoLink();\r\n    String ${photoLinkHref:newName(java.lang.String)} \u003d ${photoLink}.getHref();\r\n    System.out.println(\"Photo Link: \" + ${photoLinkHref});\r\n    if (${photoLink}.getEtag() !\u003d null) {\r\n      System.out.println(\"Contact Photo\u0027s ETag: \" + ${photoLink}.getEtag());\r\n    }\r\n    System.out.println(\"Contact\u0027s ETag: \" + ${entry}.getEtag());\r\n  }\r\n}\r\n\r\n}\r\n${import:import(com.google.api.client.auth.oauth2.Credential, com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp, com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver, com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow, com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets, com.google.api.client.googleapis.javanet.GoogleNetHttpTransport, com.google.api.client.http.HttpTransport, com.google.api.client.json.JsonFactory, com.google.api.client.json.jackson2.JacksonFactory, com.google.api.client.util.store.FileDataStoreFactory, com.google.gdata.client.contacts.ContactsService, com.google.gdata.data.Link, com.google.gdata.data.contacts.ContactEntry, com.google.gdata.data.contacts.ContactFeed, com.google.gdata.data.contacts.GroupMembershipInfo, com.google.gdata.data.extensions.Email, com.google.gdata.data.extensions.ExtendedProperty, com.google.gdata.data.extensions.Im, com.google.gdata.data.extensions.Name, com.google.gdata.util.ServiceException, com.ibm.thirdparty.google.GoogleEmail, java.io.IOException, java.io.InputStream, java.io.InputStreamReader, java.net.URL, java.util.ArrayList, java.util.List)}${cursor}\r\n",
  "location": "JAVA",
  "dependencies": [
    {
      "groupId": "jre",
      "artifactId": "jre",
      "version": "0.0.0"
    },
    {
      "groupId": "org.openengsb.wrapped",
      "artifactId": "com.google.gdata-contacts",
      "version": "0.0.0"
    }
  ]
}