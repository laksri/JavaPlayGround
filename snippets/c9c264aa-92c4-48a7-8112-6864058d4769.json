{
  "uuid": "c9c264aa-92c4-48a7-8112-6864058d4769",
  "name": "Google_Calendar",
  "description": "Get Info from Google Calendar",
  "extraSearchTerms": [
    "Google",
    "Calendar"
  ],
  "tags": [
    "Google"
  ],
  "code": "public class GoogleCalendar {\r\n\r\n    private static final String ${APPLICATION_NAME:newName(java.lang.String)} \u003d \"snippet-java-1099\";\r\n\r\n  /** Directory to store user credentials. */\r\n  private static final java.io.File ${DATA_STORE_DIR:newName(java.io.File)} \u003d\r\n      new java.io.File(\"store/calendar_sample\");\r\n\r\n  /**\r\n   * Global instance of the {@link DataStoreFactory}. The best practice is to make it a single\r\n   * globally shared instance across your application.\r\n   */\r\n  private static FileDataStoreFactory ${dataStoreFactory:newName(com.google.api.client.util.store.FileDataStoreFactory)};\r\n  \r\n  /** Global instance of the HTTP transport. */\r\n  private static HttpTransport ${httpTransport:newName(com.google.api.client.http.HttpTransport)};\r\n\r\n  /** Global instance of the JSON factory. */\r\n  private static final JsonFactory ${JSON_FACTORY:newName(com.google.api.client.json.JsonFactory)} \u003d JacksonFactory.getDefaultInstance();\r\n\r\n  private static com.google.api.services.calendar.Calendar ${client:newName(com.google.api.services.calendar.Calendar)};\r\n\r\n  static final java.util.List\u003cCalendar\u003e ${addedCalendarsUsingBatch:newName(java.util.List)} \u003d Lists.newArrayList();\r\n\r\n  /** Authorizes the installed application to access user\u0027s protected data. */\r\n  private static Credential authorize() throws Exception {\r\n    // load client secrets\r\n    GoogleClientSecrets ${clientSecrets:newName(com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets)} \u003d GoogleClientSecrets.load(${JSON_FACTORY},\r\n        new InputStreamReader(GoogleCalendar.class.getResourceAsStream(\"client_secrets.json\")));\r\n    if (${clientSecrets}.getDetails().getClientId().startsWith(\"Enter\")\r\n        || ${clientSecrets}.getDetails().getClientSecret().startsWith(\"Enter \")) {\r\n      System.out.println(\r\n          \"Enter Client ID and Secret from https://code.google.com/apis/console/?api\u003dcalendar \"\r\n          + \"into calendar-cmdline-sample/src/main/resources/client_secrets.json\");\r\n      System.exit(1);\r\n    }\r\n    // set up authorization code flow\r\n    GoogleAuthorizationCodeFlow ${flow:newName(com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow)} \u003d new GoogleAuthorizationCodeFlow.Builder(\r\n        ${httpTransport}, ${JSON_FACTORY}, ${clientSecrets},\r\n        Collections.singleton(CalendarScopes.CALENDAR)).setDataStoreFactory(${dataStoreFactory})\r\n        .build();\r\n    // authorize\r\n //   flow.\r\n          // new AuthorizationCodeInstalledApp()\r\n    return new AuthorizationCodeInstalledApp(${flow}, new LocalServerReceiver()).authorize(\"user\");\r\n  }\r\n\r\n  public static void main(String[] ${args:newName(\u0027java.lang.String[]\u0027)}) {\r\n    try {\r\n      // initialize the transport\r\n      ${httpTransport} \u003d GoogleNetHttpTransport.newTrustedTransport();\r\n\r\n      // initialize the data store factory\r\n      ${dataStoreFactory} \u003d new FileDataStoreFactory(${DATA_STORE_DIR});\r\n\r\n      // authorization\r\n      Credential ${credential:newName(com.google.api.client.auth.oauth2.Credential)} \u003d authorize();\r\n      \r\n      // set up global Calendar instance\r\n      ${client} \u003d new com.google.api.services.calendar.Calendar.Builder(\r\n          ${httpTransport}, ${JSON_FACTORY}, ${credential}).setApplicationName(${APPLICATION_NAME}).build();\r\n\r\n      // run commands\r\n      showCalendars();\r\n    } catch (IOException ${e:newName(java.io.IOException)}) {\r\n      System.err.println(${e}.getMessage());\r\n    } catch (Throwable ${t:newName(java.lang.Throwable)}) {\r\n      ${t}.printStackTrace();\r\n    }\r\n    System.exit(1);\r\n  }\r\n\r\n  private static void showCalendars() throws IOException {\r\n      \r\n    GoogleCalendarView.header(\"Show Calendars\");\r\n    CalendarList ${feed:newName(com.google.api.services.calendar.model.CalendarList)} \u003d ${client}.calendarList().list().execute();\r\n    GoogleCalendarView.display(${feed});\r\n  }\r\n\r\n  \r\n    \r\n}\r\n${import:import(com.google.api.client.auth.oauth2.Credential, com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp, com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver, com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow, com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets, com.google.api.client.googleapis.javanet.GoogleNetHttpTransport, com.google.api.client.http.HttpTransport, com.google.api.client.json.JsonFactory, com.google.api.client.json.jackson2.JacksonFactory, com.google.api.client.util.Lists, com.google.api.client.util.store.DataStoreFactory, com.google.api.client.util.store.FileDataStoreFactory, com.google.api.services.calendar.CalendarScopes, com.google.api.services.calendar.model.Calendar, com.google.api.services.calendar.model.CalendarList, com.ibm.thirdparty.google.GoogleCalendarView, java.io.IOException, java.io.InputStreamReader, java.util.Collections)}${cursor}\r\n",
  "location": "JAVA",
  "dependencies": [
    {
      "groupId": "jre",
      "artifactId": "jre",
      "version": "0.0.0"
    }
  ]
}